<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.camunda.migrator.impl.persistence.IdKeyMapper">

  <resultMap id="idKeyResultMap" type="io.camunda.migrator.impl.persistence.IdKeyDbModel">
    <id property="id" column="ID" jdbcType="VARCHAR"/>
    <result property="instanceKey" column="INSTANCE_KEY" jdbcType="BIGINT"/>
    <result property="startDate" column="START_DATE" jdbcType="TIMESTAMP"/>
    <result property="type" column="TYPE" jdbcType="VARCHAR"/>
    <result property="skipReason" column="SKIP_REASON" jdbcType="VARCHAR"/>
  </resultMap>

  <resultMap id="skippedVariablesByProcessInstanceResultMap" type="io.camunda.migrator.impl.persistence.SkippedVariablesByProcessInstanceDbModel">
    <result property="processInstanceId" column="PROC_INST_ID" jdbcType="VARCHAR"/>
    <result property="skippedVariableCount" column="SKIPPED_VARIABLE_COUNT" jdbcType="BIGINT"/>
    <result property="skippedVariableIds" column="SKIPPED_VARIABLE_IDS" jdbcType="VARCHAR"/>
    <result property="skippedVariableNames" column="SKIPPED_VARIABLE_NAMES" jdbcType="VARCHAR"/>
    <result property="skipReasons" column="SKIP_REASONS" jdbcType="VARCHAR"/>
  </resultMap>

  <select id="countSkippedByType" resultType="long">
    SELECT COUNT(ID) FROM ${prefix}MIGRATION_MAPPING
    WHERE TYPE = #{type} AND INSTANCE_KEY IS NULL
  </select>

  <select id="findSkippedByType" resultMap="idKeyResultMap">
    <include refid="findSkippedByQueryCriteriaSql"/>
  </select>

  <select id="countMigratedByType" resultType="long">
    SELECT COUNT(ID) FROM ${prefix}MIGRATION_MAPPING
    WHERE TYPE = #{type} AND INSTANCE_KEY IS NOT NULL
  </select>

  <!-- findMigratedByType is used by the migrator cockpit plugin -->
  <select id="findMigratedByType" resultMap="idKeyResultMap">
    SELECT ID, INSTANCE_KEY, START_DATE, TYPE, SKIP_REASON FROM ${prefix}MIGRATION_MAPPING
    WHERE TYPE = #{type} AND INSTANCE_KEY IS NOT NULL
    <include refid="io.camunda.migrator.Commons.pageSql"/>
  </select>

  <sql id="findSkippedByQueryCriteriaSql">
    SELECT ID, INSTANCE_KEY, START_DATE, TYPE, SKIP_REASON FROM ${prefix}MIGRATION_MAPPING
    WHERE TYPE = #{type} AND INSTANCE_KEY IS NULL
    <include refid="io.camunda.migrator.Commons.pageSql"/>
  </sql>

  <select id="findAllIds">
    SELECT ID
    FROM ${prefix}MIGRATION_MAPPING
  </select>

  <select id="findSkippedVariablesByProcessInstance" resultMap="skippedVariablesByProcessInstanceResultMap">
    SELECT
        v.PROC_INST_ID_ as PROC_INST_ID,
        COUNT(m.ID) as SKIPPED_VARIABLE_COUNT,
        STRING_AGG(m.ID, ', ') as SKIPPED_VARIABLE_IDS,
        STRING_AGG(v.NAME_, ', ') as SKIPPED_VARIABLE_NAMES,
        STRING_AGG(DISTINCT m.SKIP_REASON, '; ') as SKIP_REASONS
    FROM ${prefix}MIGRATION_MAPPING m
    INNER JOIN ACT_HI_VARINST v ON m.ID = v.ID_
    WHERE m.TYPE = 'HISTORY_VARIABLE'
        AND m.SKIP_REASON IS NOT NULL
    GROUP BY v.PROC_INST_ID_
    ORDER BY SKIPPED_VARIABLE_COUNT DESC
    <include refid="io.camunda.migrator.Commons.pageSql"/>
  </select>

  <update id="updateKeyById" parameterType="io.camunda.migrator.impl.persistence.IdKeyDbModel">
    UPDATE ${prefix}MIGRATION_MAPPING
    SET INSTANCE_KEY = #{instanceKey, jdbcType=BIGINT}
    WHERE ID = #{id, jdbcType=VARCHAR}
  </update>

  <select id="findLatestIdByType" parameterType="java.lang.String">
    SELECT ID FROM ${prefix}MIGRATION_MAPPING WHERE TYPE = '${type}' ORDER BY ID DESC
    <include refid="io.camunda.migrator.Commons.singleResultSql"/>
  </select>

  <select id="checkHasKey" resultType="boolean" parameterType="java.lang.String">
    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
    FROM ${prefix}MIGRATION_MAPPING
    WHERE ID = #{id, jdbcType=VARCHAR}
    AND INSTANCE_KEY IS NOT NULL
  </select>

  <select id="checkHasKeyByTypeAndId" resultType="boolean">
    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
    FROM ${prefix}MIGRATION_MAPPING
    WHERE ID = #{id, jdbcType=VARCHAR}
      AND TYPE = #{type, jdbcType=VARCHAR}
      AND INSTANCE_KEY IS NOT NULL
  </select>

  <select id="checkExists" resultType="boolean" parameterType="java.lang.String">
    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
    FROM ${prefix}MIGRATION_MAPPING
    WHERE ID = #{id, jdbcType=VARCHAR}
  </select>

  <select id="checkExistsByTypeAndId" resultType="boolean">
    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
    FROM ${prefix}MIGRATION_MAPPING
    WHERE ID = #{id, jdbcType=VARCHAR}
      AND TYPE = #{type, jdbcType=VARCHAR}
  </select>

  <select id="findLatestStartDateByType" parameterType="java.lang.String">
    <!-- No need to order with two criteria since we limit result to return exactly one start date -->
    SELECT START_DATE FROM ${prefix}MIGRATION_MAPPING WHERE TYPE = '${type}' ORDER BY START_DATE DESC
    <include refid="io.camunda.migrator.Commons.singleResultSql"/>
  </select>

  <select id="findKeyById" parameterType="java.lang.String">
    SELECT INSTANCE_KEY FROM ${prefix}MIGRATION_MAPPING WHERE ID = #{id}
    <include refid="io.camunda.migrator.Commons.singleResultSql"/>
  </select>

  <insert
    id="insert"
    parameterType="io.camunda.migrator.impl.persistence.IdKeyDbModel"
    flushCache="true">
    INSERT INTO ${prefix}MIGRATION_MAPPING (ID, INSTANCE_KEY, START_DATE, TYPE, SKIP_REASON)
    VALUES (#{id, jdbcType=VARCHAR}, #{instanceKey, jdbcType=BIGINT}, #{startDate, jdbcType=TIMESTAMP}, #{type, jdbcType=VARCHAR}, #{skipReason, jdbcType=VARCHAR})
  </insert>

  <delete id="delete">
    DELETE FROM ${prefix}MIGRATION_MAPPING
    WHERE ID = #{id}
  </delete>

</mapper>